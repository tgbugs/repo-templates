#+title: Repository Templates

Sane templates for new programming projects.

* Intro
This repository holds basic templates for repositories for different
languages that I have found to be reasonably sane for cross platform
development, deployment, and packaging.

I generally think that templates are a bad way to go for anything,
because they are difficult to keep in sync and nearly impossible to
push fixes for if there are stateful changes that are made after the
template has been populated. However, having the templates as a
reference target for implementing a more flexible structure can still
be quite valuable. Thus this repo exists as a documentation for
current +best+ practices and to serve as data inputs for transforming
existing repos to match.
* Templates
** Python
** Emacs Lisp
** Common Lisp
** Racket
* Variables
#+begin_src bash :results pp
grep -r '{:[A-Z_]\+}' -oh | sort -u
#+end_src

#+RESULTS:
#+begin_example
{:AUTHOR_EMAIL}
{:AUTHOR_NAME}
{:CURRENT_YEAR}
{:GROUP_NAME}
{:MAINTAINER_EMAIL}
{:MAINTAINER_NAME}
{:MODULE_NAME}
{:PROJECT_NAME}
{:REPO_NAME}
{:REPO_PROJECT_PATH}
#+end_example
* Current practice
All packaged units
#+name: apu
| lang   | group  | repo           | internal path | project path         | module name  | project name | pd |
|--------+--------+----------------+---------------+----------------------+--------------+--------------+----|
| Python | tgbugs | augpathlib     | .             | augpathlib           | augpathlib   | augpathlib   |    |
| Python | tgbugs | pyontutils     | htmlfn        | pyontutils/htmlfn    | htmlfn       | htmlfn       |    |
| Python | tgbugs | hyputils       | .             | hyputils             | hyputils     | hyputils     |    |
| Python | tgbugs | idlib          | .             | idlib                | idlib        | idlib        |    |
| Python | tgbugs | pyontutils     | librdflib     | pyontutils/librdflib | librdflib    | librdflib    |    |
| Python | tgbugs | orthauth       | .             | orthauth             | orthauth     | orthauth     |    |
| Python | tgbugs | ontquery       | .             | ontquery             | ontquery     | ontquery     |    |
| Python | tgbugs | pyontutils     | neurondm      | pyontutils/neurondm  | neurondm     | neurondm     |    |
| Python | tgbugs | pyontutils     | nifstd        | pyontutils/nifstd    | nifstd_tools | nifstd-tools | x  |
| Python | tgbugs | protc          | protcur       | protc/protcur        | protcur      | protcur      |    |
| Python | tgbugs | protbot        | .             | protbot              | protbot      | protbot      |    |
| Python | tgbugs | pyontutils     | .             | pyontutils           | pyontutils   | pyontutils   |    |
| Python | tgbugs | parsercomb     | .             | parsercomb           | pysercomb    | pysercomb    |    |
| Python | tgbugs | scibot         | .             | scibot               | scibot       | scibot       |    |
| Python | tgbugs | sparc-curation | .             | sparc-curation       | sparcur      | sparcur      |    |
| Python | tgbugs | sxpyr          | .             | sxpyr                | sxpyr        | sxpyr        |    |
| Python | tgbugs | pyontutils     | ttlser        | pyontutils/ttlser    | ttlser       | ttlser       |    |
#+TBLFM: @2$5..@>$5='(if (string= @$-1 ".") @$-2 (concat @$-2 "/" @$-1))
#+TBLFM: @2$8..@>$8='(if (string= @$-1 @$-2) "" "x")
#+TBLFM: @2$7=(@$-1)::@3$7=(@$-1)::@4$7=(@$-1)::@5$7=(@$-1)::@6$7=(@$-1)::@7$7=(@$-1)::@8$7=(@$-1)::@9$7=(@$-1)
#+TBLFM: @11$7=(@$-1)::@12$7=(@$-1)::@13$7=(@$-1)::@14$7=(@$-1)::@15$7=(@$-1)::@16$7=(@$-1)::@17$7=(@$-1)::@18$7=(@$-1)

# https://emacs.stackexchange.com/questions/3819/org-code-block-receives-table-without-header
#+begin_src python :var data=apu[,4] :colnames yes :results pp :epilogue "return data"
#from pathlib import Path
#Path(~/git/)
# normal structure
# ignore module name folder internal structure
# count number that match pattern
# flag variants
#+end_src

#+begin_src bash :var paths=apu[,4] projects=apu[,5] :colnames yes :results raw
echo \#+BEGIN: project paths
for i in ${!paths[@]}; do
    path=${paths[i]}
    project=${projects[i]}
    echo :${project}:
    tree -d ~/git/"${path}" -I __pycache__\|BUILD\|doc_build*\|test-base-*\|dead\|test_local*\|build\|dist\|*.egg-info | sed 's/Â /\ /g'
    echo :end:
done
echo \#+END:
#+end_src
